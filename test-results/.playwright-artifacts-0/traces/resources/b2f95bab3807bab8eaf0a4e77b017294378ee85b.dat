import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/components/Map/Map.tsx");import __vite__cjsImport0_react_jsxDevRuntime from "/node_modules/.vite/deps/react_jsx-dev-runtime.js?v=b175f560"; const jsxDEV = __vite__cjsImport0_react_jsxDevRuntime["jsxDEV"];
import RefreshRuntime from "/@react-refresh";
const inWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
let prevRefreshReg;
let prevRefreshSig;
if (import.meta.hot && !inWebWorker) {
  if (!window.__vite_plugin_react_preamble_installed__) {
    throw new Error("@vitejs/plugin-react can't detect preamble. Something is wrong. See https://github.com/vitejs/vite-plugin-react/pull/11#discussion_r430879201");
  }
  prevRefreshReg = window.$RefreshReg$;
  prevRefreshSig = window.$RefreshSig$;
  window.$RefreshReg$ = (type, id) => {
    RefreshRuntime.register(type, "/Users/ewa.wrobel/fun-with-maps/fun-with-maps/src/components/Map/Map.tsx " + id);
  };
  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;
}
var _s2 = $RefreshSig$();
import __vite__cjsImport3_react from "/node_modules/.vite/deps/react.js?v=b175f560"; const useEffect = __vite__cjsImport3_react["useEffect"]; const useRef = __vite__cjsImport3_react["useRef"];
import H from "/node_modules/.vite/deps/@here_maps-api-for-javascript.js?v=b175f560";
import { coordinatesList } from "/src/utils/dataForMap.ts";
import { addInfoBubble, showBubbleOnMenuClick } from "/src/utils/addMapInfo.ts";
import "/src/components/Map/Map.scss";
import useElementSize from "/src/hooks/useElementSize.ts";
import { useMiddleCoordinate } from "/src/hooks/useMiddleCoordinate.ts";
import { useDoubleRadius } from "/src/hooks/useDoubleRadius.ts";
export const MyMap = (props) => {
  _s2();
  var _s = $RefreshSig$();
  const mapRef = useRef(null);
  const map = useRef(null);
  const platform = useRef(null);
  const uis = useRef(null);
  const { apikey, userPosition, mapPointPosition, mapPointsList } = props;
  const [boxRef, { width, height }] = useElementSize();
  _s(useEffect(
    _s(
      () => {
        _s();
        if (!map.current) {
          platform.current = new H.service.Platform({ apikey });
          const rasterTileService = platform.current.getRasterTileService({
            queryParams: {
              style: "explore.day",
              size: 512
            }
          });
          const rasterTileProvider = new H.service.rasterTile.Provider(
            rasterTileService
          );
          const rasterTileLayer = new H.map.layer.TileLayer(rasterTileProvider);
          const newMap = new H.Map(mapRef.current, rasterTileLayer, {
            pixelRatio: window.devicePixelRatio,
            center: userPosition,
            zoom: 14
          });
          const behavior = new H.mapevents.Behavior(
            new H.mapevents.MapEvents(newMap)
          );
          map.current = newMap;
          const ui = H.ui.UI.createDefault(newMap, rasterTileLayer);
          uis.current = ui;
          addInfoBubble({ map: newMap, ui, pointsData: mapPointsList, H });
          const circleCenterPosition = useMiddleCoordinate(coordinatesList);
          const circle = new H.map.Circle(circleCenterPosition, useDoubleRadius(coordinatesList, circleCenterPosition), {
            //@ts-ignore
            style: {
              fillColor: "rgba(255, 255, 255, 0.5)",
              strokeColor: "#829",
              lineWidth: 1
            }
          });
          newMap.addObject(circle);
          window.addEventListener("resize", function() {
            newMap.getViewPort().resize();
          });
        }
        if (mapPointPosition) {
          showBubbleOnMenuClick({ map: map.current, ui: uis.current, dataPoint: mapPointPosition });
        }
      },
      "tx6w+fP1tdid33elu5OUDAz89AE=",
      false,
      function() {
        return [useMiddleCoordinate, useDoubleRadius];
      }
    ),
    // Dependencies array
    [apikey, userPosition, mapPointPosition]
  ), "tx6w+fP1tdid33elu5OUDAz89AE=", false, function() {
    return [useMiddleCoordinate, useDoubleRadius];
  });
  useEffect(() => {
    if (map.current) {
      map.current.getViewPort().resize();
    }
  }, [width, height]);
  return /* @__PURE__ */ jsxDEV("div", { style: { width: "100%", height: "100%" }, ref: boxRef, children: /* @__PURE__ */ jsxDEV("div", { style: { width: "100%", height: "100%" }, ref: mapRef }, void 0, false, {
    fileName: "/Users/ewa.wrobel/fun-with-maps/fun-with-maps/src/components/Map/Map.tsx",
    lineNumber: 120,
    columnNumber: 70
  }, this) }, void 0, false, {
    fileName: "/Users/ewa.wrobel/fun-with-maps/fun-with-maps/src/components/Map/Map.tsx",
    lineNumber: 120,
    columnNumber: 10
  }, this);
};
_s2(MyMap, "Xe0P509IJtRx1eTn92dV20cYIyI=", false, function() {
  return [useElementSize];
});
_c = MyMap;
var _c;
$RefreshReg$(_c, "MyMap");
if (import.meta.hot && !inWebWorker) {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
  RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
    RefreshRuntime.registerExportsForReactRefresh("/Users/ewa.wrobel/fun-with-maps/fun-with-maps/src/components/Map/Map.tsx", currentExports);
    import.meta.hot.accept((nextExports) => {
      if (!nextExports)
        return;
      const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate(currentExports, nextExports);
      if (invalidateMessage)
        import.meta.hot.invalidate(invalidateMessage);
    });
  });
}

//# sourceMappingURL=data:application/json;base64,