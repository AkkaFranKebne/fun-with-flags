import { mapPoint } from "/src/utils/mapPoint.ts";
import { moveMap } from "/src/utils/navigateOnMap.ts";
export function addMarkerToGroup(group, coordinate, html) {
  const mappointIcon = new H.map.Icon(mapPoint);
  var marker = new H.map.Marker(coordinate, { icon: mappointIcon });
  marker.setData(html);
  group.addObject(marker);
}
export function showBubble(map, ui, name, location) {
  ui.getBubbles().forEach((bub) => ui.removeBubble(bub));
  var bubble = new H.ui.InfoBubble(location, {
    // read custom data
    content: name,
    onStateChange: function(evt) {
      if (evt.target.getState() === H.ui.InfoBubble.State.CLOSED) {
        moveMap(map, location, 14);
      }
    }
  });
  ui.addBubble(bubble);
  moveMap(map, location, 15);
}
export function addInfoBubble(props) {
  const { H: H2, map, ui, pointsData, showBubbleFunction, addMarkerToGroupFunction } = props;
  var group = new H2.map.Group();
  map.addObject(group);
  group.addEventListener("tap", function(evt) {
    const showCorrectBubble = showBubbleFunction || showBubble;
    showCorrectBubble(map, ui, evt.target.getData(), evt.target.getGeometry());
  }, false);
  pointsData.map((point) => {
    const addCorrectMarkerToGroup = addMarkerToGroupFunction || addMarkerToGroup;
    return addCorrectMarkerToGroup(group, point.location, point.name);
  });
}
export const showBubbleOnMenuClick = (props) => {
  const { map, ui, dataPoint, showBubbleFunction } = props;
  const showCorrectBubble = showBubbleFunction || showBubble;
  showCorrectBubble(map, ui, dataPoint.name, dataPoint.location);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFkZE1hcEluZm8udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFwUG9pbnRUeXBlLCBQb3NpdGlvbiB9IGZyb20gXCIuL2RhdGFGb3JNYXBcIjtcbmltcG9ydCB7IG1hcFBvaW50IH0gZnJvbSBcIi4vbWFwUG9pbnRcIjtcbmltcG9ydCB7IG1vdmVNYXAgfSBmcm9tIFwiLi9uYXZpZ2F0ZU9uTWFwXCI7XG5cblxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgbWFya2VyIGFuZCBhZGRzIGl0IHRvIGEgZ3JvdXBcbiAqIEBwYXJhbSB7SC5tYXAuR3JvdXB9IGdyb3VwICAgICAgIFRoZSBncm91cCBob2xkaW5nIHRoZSBuZXcgbWFya2VyXG4gKiBAcGFyYW0ge0guZ2VvLlBvaW50fSBjb29yZGluYXRlICBUaGUgbG9jYXRpb24gb2YgdGhlIG1hcmtlclxuICogQHBhcmFtIHtTdHJpbmd9IGh0bWwgICAgICAgICAgICAgRGF0YSBhc3NvY2lhdGVkIHdpdGggdGhlIG1hcmtlclxuICovXG4gZXhwb3J0IGZ1bmN0aW9uIGFkZE1hcmtlclRvR3JvdXAoZ3JvdXA6IGFueSwgY29vcmRpbmF0ZTogYW55LCBodG1sOiBhbnkpIHtcbiAgLy8gQ3JlYXRlIGFuIGljb24sIGFuIG9iamVjdCBob2xkaW5nIHRoZSBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlLCBhbmQgYSBtYXJrZXI6XG4gIGNvbnN0ICBtYXBwb2ludEljb24gPSBuZXcgSC5tYXAuSWNvbihtYXBQb2ludCkgXG4gIC8vQHRzLWlnbm9yZVxuICB2YXIgbWFya2VyID0gbmV3IEgubWFwLk1hcmtlcihjb29yZGluYXRlLCB7aWNvbjogbWFwcG9pbnRJY29ufSk7XG4gIC8vIGFkZCBjdXN0b20gZGF0YSB0byB0aGUgbWFya2VyXG4gIG1hcmtlci5zZXREYXRhKGh0bWwpO1xuICBncm91cC5hZGRPYmplY3QobWFya2VyKTtcbiAgfVxuXG4vKipcbiAqIFNob3dzIGJ1YmJsZSBvbiB0aGUgbWFwXG4gKi9cbiBleHBvcnQgZnVuY3Rpb24gc2hvd0J1YmJsZShtYXA6IGFueSwgdWk6IGFueSwgbmFtZTogc3RyaW5nLCBsb2NhdGlvbjogUG9zaXRpb24pIHtcbiAgLy9jbG9zZSB0aGUgb3BlbmVkIGJ1YmJsZVxuICB1aS5nZXRCdWJibGVzKCkuZm9yRWFjaCgoYnViOiBhbnkpID0+IHVpLnJlbW92ZUJ1YmJsZShidWIpKTtcbiAgLy8gZXZlbnQgdGFyZ2V0IGlzIHRoZSBtYXJrZXIgaXRzZWxmLCBncm91cCBpcyBhIHBhcmVudCBldmVudCB0YXJnZXRcbiAgLy8gZm9yIGFsbCBvYmplY3RzIHRoYXQgaXQgY29udGFpbnNcbiAgdmFyIGJ1YmJsZSA9IG5ldyBILnVpLkluZm9CdWJibGUobG9jYXRpb24sIHtcbiAgICAvLyByZWFkIGN1c3RvbSBkYXRhXG4gICAgY29udGVudDogbmFtZSxcbiAgICBvblN0YXRlQ2hhbmdlOiBmdW5jdGlvbihldnQpIHtcbiAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgaWYgKGV2dC50YXJnZXQuZ2V0U3RhdGUoKSA9PT0gSC51aS5JbmZvQnViYmxlLlN0YXRlLkNMT1NFRCkge1xuICAgICAgICAgLy8gem9vbSBvdXQgbWFwXG4gICAgICAgIG1vdmVNYXAobWFwLCBsb2NhdGlvbiwgMTQpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIC8vIHNob3cgaW5mbyBidWJibGVcbiAgdWkuYWRkQnViYmxlKGJ1YmJsZSk7XG4gIC8vIGNlbnRlciBhbmQgem9vbSBpbiBtYXAgb24gdXNlcnMgcG9zaXRpb25cbiAgbW92ZU1hcChtYXAsIGxvY2F0aW9uLCAxNSlcbn1cblxudHlwZSBhZGRJbmZvQnViYmxlVHlwZSA9IHtcbiAgbWFwOiBhbnksIFxuICB1aTogYW55LCBcbiAgcG9pbnRzRGF0YTogTWFwUG9pbnRUeXBlW10sXG4gIHNob3dCdWJibGVGdW5jdGlvbj86IHR5cGVvZiBzaG93QnViYmxlLFxuICBhZGRNYXJrZXJUb0dyb3VwRnVuY3Rpb24/OiB0eXBlb2YgYWRkTWFya2VyVG9Hcm91cCxcbiAgSD86IGFueSxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZEluZm9CdWJibGUocHJvcHM6IGFkZEluZm9CdWJibGVUeXBlKSB7XG4gIGNvbnN0IHsgSCwgbWFwLCB1aSwgcG9pbnRzRGF0YSwgc2hvd0J1YmJsZUZ1bmN0aW9uLCBhZGRNYXJrZXJUb0dyb3VwRnVuY3Rpb24gfSA9IHByb3BzO1xuICB2YXIgZ3JvdXAgPSBuZXcgSC5tYXAuR3JvdXAoKTtcblxuICBtYXAuYWRkT2JqZWN0KGdyb3VwKTtcblxuICAvLyBhZGQgJ3RhcCcgZXZlbnQgbGlzdGVuZXIsIHRoYXQgb3BlbnMgaW5mbyBidWJibGUsIHRvIHRoZSBncm91cFxuICBncm91cC5hZGRFdmVudExpc3RlbmVyKCd0YXAnLCBmdW5jdGlvbiAoZXZ0OiBhbnkpIHtcbiAgICBjb25zdCBzaG93Q29ycmVjdEJ1YmJsZSA9IHNob3dCdWJibGVGdW5jdGlvbiB8fCBzaG93QnViYmxlO1xuICAgIHNob3dDb3JyZWN0QnViYmxlKG1hcCwgdWksIGV2dC50YXJnZXQuZ2V0RGF0YSgpLCBldnQudGFyZ2V0LmdldEdlb21ldHJ5KCkpXG4gIH0sIGZhbHNlKTtcblxuICBwb2ludHNEYXRhLm1hcChwb2ludCA9PiB7XG4gICAgY29uc3QgYWRkQ29ycmVjdE1hcmtlclRvR3JvdXAgPSBhZGRNYXJrZXJUb0dyb3VwRnVuY3Rpb24gfHwgYWRkTWFya2VyVG9Hcm91cDtcbiAgICByZXR1cm4gIGFkZENvcnJlY3RNYXJrZXJUb0dyb3VwKGdyb3VwLCBwb2ludC5sb2NhdGlvbiwgcG9pbnQubmFtZSk7XG4gIH0pXG59XG5cbnR5cGUgc2hvd0J1YmJsZU9uTWVudUNsaWNrVHlwZSA9IHtcbiAgbWFwOiBhbnksIFxuICB1aTogYW55LCBcbiAgZGF0YVBvaW50OiBNYXBQb2ludFR5cGUsIFxuICBzaG93QnViYmxlRnVuY3Rpb24/OiB0eXBlb2Ygc2hvd0J1YmJsZSxcbn1cblxuIGV4cG9ydCBjb25zdCBzaG93QnViYmxlT25NZW51Q2xpY2sgPSAocHJvcHM6IHNob3dCdWJibGVPbk1lbnVDbGlja1R5cGUgKSA9PiB7XG5cbiAgY29uc3QgeyBtYXAsIHVpLCBkYXRhUG9pbnQsIHNob3dCdWJibGVGdW5jdGlvbiB9ICA9IHByb3BzO1xuICBjb25zdCBzaG93Q29ycmVjdEJ1YmJsZSA9IHNob3dCdWJibGVGdW5jdGlvbiB8fCBzaG93QnViYmxlO1xuICBzaG93Q29ycmVjdEJ1YmJsZShtYXAsIHVpLCBkYXRhUG9pbnQubmFtZSwgZGF0YVBvaW50LmxvY2F0aW9uKTtcbn0gICAiXSwibWFwcGluZ3MiOiJBQUNBLFNBQVMsZ0JBQWdCO0FBQ3pCLFNBQVMsZUFBZTtBQVVoQixnQkFBUyxpQkFBaUIsT0FBWSxZQUFpQixNQUFXO0FBRXhFLFFBQU8sZUFBZSxJQUFJLEVBQUUsSUFBSSxLQUFLLFFBQVE7QUFFN0MsTUFBSSxTQUFTLElBQUksRUFBRSxJQUFJLE9BQU8sWUFBWSxFQUFDLE1BQU0sYUFBWSxDQUFDO0FBRTlELFNBQU8sUUFBUSxJQUFJO0FBQ25CLFFBQU0sVUFBVSxNQUFNO0FBQ3RCO0FBS00sZ0JBQVMsV0FBVyxLQUFVLElBQVMsTUFBYyxVQUFvQjtBQUUvRSxLQUFHLFdBQVcsRUFBRSxRQUFRLENBQUMsUUFBYSxHQUFHLGFBQWEsR0FBRyxDQUFDO0FBRzFELE1BQUksU0FBUyxJQUFJLEVBQUUsR0FBRyxXQUFXLFVBQVU7QUFBQTtBQUFBLElBRXpDLFNBQVM7QUFBQSxJQUNULGVBQWUsU0FBUyxLQUFLO0FBRTNCLFVBQUksSUFBSSxPQUFPLFNBQVMsTUFBTSxFQUFFLEdBQUcsV0FBVyxNQUFNLFFBQVE7QUFFMUQsZ0JBQVEsS0FBSyxVQUFVLEVBQUU7QUFBQSxNQUMzQjtBQUFBLElBQ0Y7QUFBQSxFQUNGLENBQUM7QUFFRCxLQUFHLFVBQVUsTUFBTTtBQUVuQixVQUFRLEtBQUssVUFBVSxFQUFFO0FBQzNCO0FBV08sZ0JBQVMsY0FBYyxPQUEwQjtBQUN0RCxRQUFNLEVBQUUsR0FBQUEsSUFBRyxLQUFLLElBQUksWUFBWSxvQkFBb0IseUJBQXlCLElBQUk7QUFDakYsTUFBSSxRQUFRLElBQUlBLEdBQUUsSUFBSSxNQUFNO0FBRTVCLE1BQUksVUFBVSxLQUFLO0FBR25CLFFBQU0saUJBQWlCLE9BQU8sU0FBVSxLQUFVO0FBQ2hELFVBQU0sb0JBQW9CLHNCQUFzQjtBQUNoRCxzQkFBa0IsS0FBSyxJQUFJLElBQUksT0FBTyxRQUFRLEdBQUcsSUFBSSxPQUFPLFlBQVksQ0FBQztBQUFBLEVBQzNFLEdBQUcsS0FBSztBQUVSLGFBQVcsSUFBSSxXQUFTO0FBQ3RCLFVBQU0sMEJBQTBCLDRCQUE0QjtBQUM1RCxXQUFRLHdCQUF3QixPQUFPLE1BQU0sVUFBVSxNQUFNLElBQUk7QUFBQSxFQUNuRSxDQUFDO0FBQ0g7QUFTUSxhQUFNLHdCQUF3QixDQUFDLFVBQXNDO0FBRTNFLFFBQU0sRUFBRSxLQUFLLElBQUksV0FBVyxtQkFBbUIsSUFBSztBQUNwRCxRQUFNLG9CQUFvQixzQkFBc0I7QUFDaEQsb0JBQWtCLEtBQUssSUFBSSxVQUFVLE1BQU0sVUFBVSxRQUFRO0FBQy9EOyIsIm5hbWVzIjpbIkgiXX0=